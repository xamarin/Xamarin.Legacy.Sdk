# https://aka.ms/yaml

trigger:
- main

variables:
  Configuration: Release
  DotNetVersion: 6.0.100-alpha.1.20562.2
  DotNet.Cli.Telemetry.OptOut: true
  Android.Msi: https://dl.internalx.com/vsts-devdiv/Xamarin.Android/public/net6/4382031/master/19c3b73163d4d1b3fd940f6ef7908c00595dc7a9/Microsoft.NET.Workload.Android.11.0.200.37.msi
  Android.Pkg: https://dl.internalx.com/vsts-devdiv/Xamarin.Android/public/net6/4382031/master/19c3b73163d4d1b3fd940f6ef7908c00595dc7a9/Microsoft.NET.Workload.Android-11.0.200-ci.master.37.pkg
  Xamarin.Android.Vsix: https://dl.internalx.com/vsts-devdiv/Xamarin.Android/public/4382031/master/19c3b73163d4d1b3fd940f6ef7908c00595dc7a9/signed/Xamarin.Android.Sdk-11.2.99.37.vsix
  Xamarin.Android.Pkg: https://dl.internalx.com/vsts-devdiv/Xamarin.Android/public/4382031/master/19c3b73163d4d1b3fd940f6ef7908c00595dc7a9/xamarin.android-11.2.99.37.pkg
  iOS.Msi: https://bosstoragemirror.blob.core.windows.net/wrench/jenkins/main/3174e94a178c41cae0a51fa296e52f711957c14a/543/package/Microsoft.NET.Workload.iOS.14.2.100-ci.main.30.msi
  iOS.Pkg: https://bosstoragemirror.blob.core.windows.net/wrench/jenkins/main/3174e94a178c41cae0a51fa296e52f711957c14a/543/package/Microsoft.iOS.Bundle.14.2.100-ci.main.30.pkg

jobs:

- job: windows
  pool:
    vmImage: windows-latest
    demands: msbuild
  steps:
  - powershell: |
      $ProgressPreference = 'SilentlyContinue'
      Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile dotnet-install.ps1
      & .\dotnet-install.ps1 -Version $(DotNetVersion) -InstallDir "$env:ProgramFiles\dotnet\" -Verbose
      & dotnet --list-sdks
    displayName: install .NET $(DotNetVersion)
    errorActionPreference: stop
  - powershell: |
      & dotnet tool install --global boots
      & boots $(Android.Msi)
      & boots $(iOS.Msi)
    displayName: install .NET workloads
    errorActionPreference: stop
  - powershell: |
      & boots $(Xamarin.Android.Vsix)
    displayName: install Xamarin.Android
  - script: dotnet build Xamarin.Legacy.Sdk.sln -bl:$(System.DefaultWorkingDirectory)/bin/Xamarin.Legacy.Sdk.binlog
    displayName: build SDK
  - script: dotnet build samples/samples.sln -bl:$(System.DefaultWorkingDirectory)/bin/samples.binlog
    displayName: build samples
  - task: PublishPipelineArtifact@1
    displayName: artifacts
    inputs:
      artifact: windows
      targetPath: bin
    condition: succeededOrFailed()

- job: mac
  pool:
    vmImage: macOS-latest
    demands: msbuild
  variables:
    DotNet.Root: /usr/local/share/dotnet/
    DotNet.Tools: ~/.dotnet/tools
  steps:
  - bash: >
      export PATH="$(DotNet.Root):$(DotNet.Tools):$PATH" &&
      curl -L https://dot.net/v1/dotnet-install.sh > dotnet-install.sh &&
      sh dotnet-install.sh --version $(DotNetVersion) --install-dir $DOTNET_ROOT --verbose &&
      dotnet --list-sdks &&
      echo "##vso[task.setvariable variable=PATH]$PATH"
    displayName: install .NET $(DotNetVersion)
  - bash: >
      dotnet tool install --global boots &&
      boots $(Android.Pkg) &&
      boots $(iOS.Pkg)
    displayName: install .NET workloads
  - bash: boots $(Xamarin.Android.Pkg)
    displayName: install Xamarin.Android
  - script: dotnet build Xamarin.Legacy.Sdk.sln -bl:$(System.DefaultWorkingDirectory)/bin/Xamarin.Legacy.Sdk.binlog
    displayName: build SDK
  # TODO: build all samples when problem with generator.exe is fixed
  - script: dotnet build samples/Hello/Hello.csproj -bl:$(System.DefaultWorkingDirectory)/bin/samples.binlog
    displayName: build samples
  - task: PublishPipelineArtifact@1
    displayName: artifacts
    inputs:
      artifact: mac
      targetPath: bin
    condition: succeededOrFailed()
