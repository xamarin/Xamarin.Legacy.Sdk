# https://aka.ms/yaml

trigger:
- main

resources:
  repositories:
  - repository: templates
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/main
    endpoint: xamarin

variables:
  - group: Xamarin-Secrets
  - group: Xamarin Release
  - name: Configuration
    value: Release
  - name: DotNetVersion
    value: 6.0.100-preview.4.21255.9
  - name: BootsVersion
    value: 1.0.4.624
  - name: DotNet.Cli.Telemetry.OptOut
    value: true
  - name: Android.Msi
    value: https://dl.internalx.com/vsts-devdiv/Xamarin.Android/public/net6/4716293/6.0.1xx-preview4/a09fa1e93a94c7ee9f759c840ed7a5829d0e9152/Microsoft.NET.Workload.Android.11.0.200.245.msi
  - name: Android.Pkg
    value: https://dl.internalx.com/vsts-devdiv/Xamarin.Android/public/net6/4716293/6.0.1xx-preview4/a09fa1e93a94c7ee9f759c840ed7a5829d0e9152/Microsoft.NET.Workload.Android-11.0.200-preview.4.245.pkg
  - name: iOS.Msi
    value: https://bosstoragemirror.azureedge.net/wrench/6.0.1xx-preview4/05cf7f73ec60d360f1a6391f1c047d4e8957203a/4731910/package/Microsoft.NET.Workload.iOS.14.5.100-preview.4.638.msi
  - name: iOS.Pkg
    value: https://bosstoragemirror.azureedge.net/wrench/6.0.1xx-preview4/05cf7f73ec60d360f1a6391f1c047d4e8957203a/4731910/package/notarized/Microsoft.iOS.Bundle.14.5.100-preview.4.638.pkg

jobs:

- job: windows
  pool:
    vmImage: windows-latest
    demands: msbuild
  steps:
  - powershell: |
      $ProgressPreference = 'SilentlyContinue'
      Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile dotnet-install.ps1
      & .\dotnet-install.ps1 -Version $(DotNetVersion) -InstallDir "$env:ProgramFiles\dotnet\" -Verbose
      & dotnet --list-sdks
    displayName: install .NET $(DotNetVersion)
  - powershell: |
      & dotnet tool update --global boots --version $(BootsVersion)
      & boots $(Android.Msi)
      & boots $(iOS.Msi)
    displayName: install .NET workloads
  - powershell: |
      & boots --stable Xamarin.Android
    displayName: install Xamarin.Android
  - script: dotnet build Xamarin.Legacy.Sdk.sln -bl:$(System.DefaultWorkingDirectory)/bin/Xamarin.Legacy.Sdk.binlog
    displayName: build SDK
  - script: dotnet build samples/samples.sln -bl:$(System.DefaultWorkingDirectory)/bin/samples.binlog
    displayName: build samples
  - task: PublishPipelineArtifact@1
    displayName: artifacts
    inputs:
      artifact: windows
      targetPath: bin
    condition: succeededOrFailed()
  # NOTE: that PublishBuildArtifacts is required for signing
  - task: PublishBuildArtifacts@1
    displayName: nuget-unsigned
    inputs:
      artifactName: nuget-unsigned
      pathToPublish: bin/Release
    condition: succeededOrFailed()

# Builds with MSBuild from VS
- job: vs
  pool:
    vmImage: windows-latest
    demands: msbuild
  steps:
  - powershell: |
      $ProgressPreference = 'SilentlyContinue'
      Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile dotnet-install.ps1
      & .\dotnet-install.ps1 -Version $(DotNetVersion) -InstallDir "$env:ProgramFiles\dotnet\" -Verbose
      & dotnet --list-sdks
    displayName: install .NET $(DotNetVersion)
  - powershell: |
      & dotnet tool update --global boots --version $(BootsVersion)
      & boots $(Android.Msi)
      & boots $(iOS.Msi)
    displayName: install .NET workloads
  - powershell: |
      & boots --stable Xamarin.Android
    displayName: install Xamarin.Android
  - task: MSBuild@1
    inputs:
      solution: Xamarin.Legacy.Sdk.sln
      msbuildArguments: -restore -bl:$(System.DefaultWorkingDirectory)/bin/Xamarin.Legacy.Sdk.binlog
    displayName: build SDK
  - task: MSBuild@1
    inputs:
      solution: samples/samples.sln
      msbuildArguments: -restore -bl:$(System.DefaultWorkingDirectory)/bin/samples.binlog
    displayName: build samples
  - task: PublishPipelineArtifact@1
    displayName: artifacts
    inputs:
      artifact: vs
      targetPath: bin
    condition: succeededOrFailed()

- job: mac
  pool:
    vmImage: macOS-latest
    demands: msbuild
  variables:
    DotNet.Root: /usr/local/share/dotnet/
    DotNet.Tools: ~/.dotnet/tools
  steps:
  - script: echo '##vso[task.setvariable variable=JI_JAVA_HOME]$(JAVA_HOME_11_X64)'
    displayName: set JI_JAVA_HOME
  - bash: >
      export PATH="$(DotNet.Root):$(DotNet.Tools):$PATH" &&
      curl -L https://dot.net/v1/dotnet-install.sh > dotnet-install.sh &&
      sh dotnet-install.sh --version $(DotNetVersion) --install-dir $DOTNET_ROOT --verbose &&
      dotnet --list-sdks &&
      echo "##vso[task.setvariable variable=PATH]$PATH"
    displayName: install .NET $(DotNetVersion)
  - bash: >
      dotnet tool update --global boots --version $(BootsVersion) &&
      boots $(Android.Pkg) &&
      boots $(iOS.Pkg)
    displayName: install .NET workloads
  - bash: boots --stable Xamarin.Android
    displayName: install Xamarin.Android
  - script: dotnet build Xamarin.Legacy.Sdk.sln -bl:$(System.DefaultWorkingDirectory)/bin/Xamarin.Legacy.Sdk.binlog
    displayName: build SDK
  - script: dotnet build samples/samples.sln -bl:$(System.DefaultWorkingDirectory)/bin/samples.binlog
    displayName: build samples
  - task: PublishPipelineArtifact@1
    displayName: artifacts
    inputs:
      artifact: mac
      targetPath: bin
    condition: succeededOrFailed()

- template: sign-artifacts/jobs/v2.yml@templates
  parameters:
    displayName: sign
    artifactName: nuget-unsigned
    dependsOn: windows
